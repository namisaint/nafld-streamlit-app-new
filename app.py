import streamlit as st
import pandas as pd
from pymongo import MongoClient
from pymongo.server_api import ServerApi
import pickle
import shap

# --- MongoDB Connection and Data Loading ---

# This function connects to your MongoDB database
# Streamlit's cache_resource decorator ensures the connection
# is only initialized once.
@st.cache_resource
def init_connection():
    # Use st.secrets to securely access the connection string
    return MongoClient(st.secrets["mongo"]["uri"], server_api=ServerApi('1'))

client = init_connection()

# This function retrieves your data from MongoDB
# Streamlit's cache_data decorator caches the result of the function
# so it doesn't re-run on every user interaction.
@st.cache_data(ttl=600)  # TTL (Time To Live) is set to 10 minutes (600 seconds)
def get_data_from_db():
    db = client.NAFLD_Models # Connect to your database
    items = db.fs.files.find() # Connect to your collection
    # Convert MongoDB cursor to a list of dictionaries
    items_list = list(items)
    # Convert list of dictionaries to a Pandas DataFrame
    df = pd.DataFrame(items_list)
    # The '_id' column is automatically generated by MongoDB, we can drop it.
    if '_id' in df.columns:
        df = df.drop(columns=['_id'])
    return df

# --- Model Loading ---

# Use Streamlit's cache to load your trained model once
@st.cache_resource
def load_model():
    # Load your trained model file here
    # Make sure this file is in your project directory
    with open('rf_lifestyle_model.pkl', 'rb') as f:
        return pickle.load(f)

# Load the trained model
model = load_model()

# Load the data for reference (e.g., for SHAP plots)
df = get_data_from_db()


# --- Main Streamlit App Logic ---

st.title("NAFLD Risk Self-Screening Tool")
st.write("Enter your data below to receive a non-invasive risk assessment.")

# Use a form to group inputs and prevent re-runs
with st.form("risk_assessment_form"):
    st.subheader("Sociodemographic & Lifestyle Data")

    # Define the inputs based on the provided NHANES codes
    # User Input Widgets for all 21 features
    st.markdown("### Sociodemographic Data")
    col1, col2 = st.columns(2)
    with col1:
        gender = st.selectbox('Gender (RIAGENDR)', options=['Male', 'Female'])
        race_ethnicity = st.selectbox('Race/Ethnicity (RIDRETH3)', options=['Mexican American', 'Other Hispanic', 'Non-Hispanic White', 'Non-Hispanic Black', 'Other Race - Including Multi-Racial'])
    with col2:
        age = st.slider('Age in Years (RIDAGEYR)', min_value=18, max_value=80, value=45)
        income_ratio = st.slider('Family Income-to-Poverty Ratio (INDFMPIR)', min_value=0.0, max_value=5.0, value=1.5, step=0.01)

    st.markdown("### Alcohol and Smoking Data")
    col1, col2 = st.columns(2)
    with col1:
        has_drank_12 = st.selectbox('Had at least 12 alcohol drinks/1 yr? (ALQ111)', options=['Yes', 'No'])
        drinks_per_day = st.slider('Average number of drinks on days consumed (ALQ142)', min_value=0, max_value=20, value=2)
        smoker_status = st.selectbox('Smoking Status (Is_Smoker_Cat)', options=['Never', 'Former', 'Current'])
    with col2:
        how_often_drink = st.slider('How often do you drink in the last year? (ALQ121)', min_value=0, max_value=365, value=100)
        num_heavy_drink_days = st.slider('Number of days had 5+/4+ drinks? (ALQ170)', min_value=0, max_value=365, value=0)
        has_heavy_drank = st.selectbox('Ever had 5+/4+ drinks in a day? (ALQ151)', options=['Yes', 'No'])

    st.markdown("### Sleep Data")
    col1, col2 = st.columns(2)
    with col1:
        sleep_trouble = st.selectbox('How often have trouble sleeping? (SLQ050)', options=['Never', 'Rarely', 'Sometimes', 'Often'])
    with col2:
        sleep_hours = st.slider('Average sleep hours per day (SLD012)', min_value=1, max_value=12, value=7)
        sleep_diagnosis = st.selectbox('Had a medical sleep diagnosis? (SLQ120)', options=['Yes', 'No'])

    st.markdown("### Dietary Intake (Last 24 Hours)")
    col1, col2, col3 = st.columns(3)
    with col1:
        calories = st.number_input('Total Kilocalories (DR1TKCAL)', min_value=0, value=2000)
        protein = st.number_input('Total Protein (DR1TPROT)', min_value=0, value=75)
    with col2:
        carbs = st.number_input('Total Carbohydrates (DR1TCARB)', min_value=0, value=250)
        sugar = st.number_input('Total Sugar (DR1TSUGR)', min_value=0, value=90)
    with col3:
        fiber = st.number_input('Total Fiber (DR1TFIBE)', min_value=0, value=25)
        total_fat = st.number_input('Total Fat (DR1TTFAT)', min_value=0, value=65)
        
    st.markdown("### Physical & Anthropometric Data")
    col1, col2 = st.columns(2)
    with col1:
        paq620 = st.slider('Days of moderate activity per week (PAQ620)', min_value=0, max_value=7, value=3)
    with col2:
        bmi = st.number_input('BMI (BMXBMI)', min_value=15.0, max_value=50.0, value=25.0)

    submitted = st.form_submit_button("Get Risk Assessment")

    if submitted:
        # 2. Prediction Logic - Call your trained model
        # There are exactly 21 features in this DataFrame, matching your provided list.
        # NOTE: You MUST ensure that the feature names and the encoding of categorical data
        # match exactly what your model was trained on. This is an example.
        user_data = pd.DataFrame({
            'RIAGENDR': [1 if gender == 'Male' else 2],
            'RIDAGEYR': [age],
            'RIDRETH3': [race_ethnicity],
            'INDFMPIR': [income_ratio],
            'ALQ111': [1 if has_drank_12 == 'Yes' else 2],
            'ALQ121': [how_often_drink],
            'ALQ142': [drinks_per_day],
            'ALQ151': [1 if has_heavy_drank == 'Yes' else 2],
            'ALQ170': [num_heavy_drink_days],
            'Is_Smoker_Cat': [smoker_status],
            'SLQ050': [sleep_trouble],
            'SLQ120': [1 if sleep_diagnosis == 'Yes' else 2],
            'SLD012': [sleep_hours],
            'DR1TKCAL': [calories],
            'DR1TPROT': [protein],
            'DR1TCARB': [carbs],
            'DR1TSUGR': [sugar],
            'DR1TFIBE': [fiber],
            'DR1TTFAT': [total_fat],
            'PAQ620': [paq620],
            'BMXBMI': [bmi],
        })

        # Make the prediction
        prediction = model.predict(user_data)[0]

        st.subheader("Your Results")
        if prediction == 1:
            st.error("Based on your data, you are at risk for NAFLD.")
        else:
            st.success("Based on your data, you are likely not at risk for NAFLD.")

        # 3. SHAP Explainability - Show why the model made its decision
        st.subheader("Explanation of the Prediction")
        
        # Create an explainer object
        explainer = shap.TreeExplainer(model)
        # Calculate SHAP values for the single user input
        shap_values = explainer.shap_values(user_data)
        
        # Display the SHAP force plot for the individual prediction
        st.write("This chart shows how each factor contributed to your risk score:")
        shap.initjs()
        st.pyplot(shap.force_plot(explainer.expected_value[1], shap_values[1], user_data))

# The rest of your app logic, such as comparing models or fairness plots, goes here
# You can create a new page for this using Streamlit's multipage app feature if you like!
